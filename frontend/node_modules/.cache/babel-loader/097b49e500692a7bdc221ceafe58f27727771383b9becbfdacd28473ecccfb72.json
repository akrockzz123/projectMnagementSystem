{"ast":null,"code":"var _jsxFileName = \"/home/aniketkumar/KB/projectMnagementSystem/frontend/src/component/AlertShow.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Alertshow(arrs) {\n  _s();\n  const [isHide, setIsHide] = useState(false);\n\n  //console.log(arrs[0],arrs[1],arrs,typeof(arrs))\n\n  const str1 = arrs.arrs.msgtype;\n  const str2 = arrs.arrs.msg;\n\n  //const str2 = arrs[1]\n\n  //setTimeout(() => setIsHide(false), 5000);\n\n  //   setTimeout(() => setIsHide(true),10000\n  console.log(\"alertshow\", arrs.arrs.msgtype, arrs.arrs.msg, typeof arrs, arrs, isHide);\n  const dispatch = useDispatch(_);\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setIsHide(true);\n    }, 1000);\n    return () => {\n      clearTimeout(timeoutId);\n      dispatch({\n        type: userActionType.USER_SIGNUP_RESET\n      });\n    }; // return function will only run when the component unmount\n  }, []); // using empty square bracket it means after the component muount it will run only once\n\n  // const types = variants\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !isHide ? /*#__PURE__*/_jsxDEV(Alert, {\n      variant: str1,\n      style: {\n        width: \"42rem\",\n        marginTop: \"100px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert.Heading, {\n        children: str2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this)\n  }, void 0, false);\n}\n_s(Alertshow, \"1V8MrVkuC+BL7D5K7OB+ZrnJPYM=\", true);\n_c = Alertshow;\nvar _c;\n$RefreshReg$(_c, \"Alertshow\");","map":{"version":3,"names":["useState","useEffect","Alert","jsxDEV","_jsxDEV","Fragment","_Fragment","Alertshow","arrs","_s","isHide","setIsHide","str1","msgtype","str2","msg","console","log","dispatch","useDispatch","_","timeoutId","setTimeout","clearTimeout","type","userActionType","USER_SIGNUP_RESET","children","variant","style","width","marginTop","Heading","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aniketkumar/KB/projectMnagementSystem/frontend/src/component/AlertShow.tsx"],"sourcesContent":["\n\n\nimport { useState, useEffect } from \"react\";\n\nimport { Alert } from \"react-bootstrap\";\nimport { isVariableDeclarationList } from \"typescript\";\n\n\nexport function Alertshow (arrs : any)   {\n  const [isHide, setIsHide] = useState(false);\n\n  //console.log(arrs[0],arrs[1],arrs,typeof(arrs))\n\n  const str1  = arrs.arrs.msgtype\n\n  const str2 = arrs.arrs.msg\n\n  //const str2 = arrs[1]\n\n  //setTimeout(() => setIsHide(false), 5000);\n\n//   setTimeout(() => setIsHide(true),10000\nconsole.log(\"alertshow\",arrs.arrs.msgtype,arrs.arrs.msg,typeof(arrs),arrs,isHide)\n\n\nconst dispatch = useDispatch(_)\nuseEffect(() => {\n    const timeoutId = setTimeout(() => {\n      setIsHide(true);\n    }, 1000);\n\n    return () => {\n      clearTimeout(timeoutId);\n\n      dispatch({type : userActionType.USER_SIGNUP_RESET})\n    }; // return function will only run when the component unmount\n  }, []); // using empty square bracket it means after the component muount it will run only once\n\n\n // const types = variants\n  return (\n    <>\n    { !isHide ? <Alert variant = {str1} style={{ width: \"42rem\", marginTop: \"100px\" }}>\n      <Alert.Heading>\n        {str2}\n      </Alert.Heading>\n    </Alert> : <div></div>}\n\n    </>\n  );\n}\n\n"],"mappings":";;AAGA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,KAAK,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAIxC,OAAO,SAASC,SAASA,CAAEC,IAAU,EAAI;EAAAC,EAAA;EACvC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAE3C;;EAEA,MAAMY,IAAI,GAAIJ,IAAI,CAACA,IAAI,CAACK,OAAO;EAE/B,MAAMC,IAAI,GAAGN,IAAI,CAACA,IAAI,CAACO,GAAG;;EAE1B;;EAEA;;EAEF;EACAC,OAAO,CAACC,GAAG,CAAC,WAAW,EAACT,IAAI,CAACA,IAAI,CAACK,OAAO,EAACL,IAAI,CAACA,IAAI,CAACO,GAAG,EAAC,OAAOP,IAAK,EAACA,IAAI,EAACE,MAAM,CAAC;EAGjF,MAAMQ,QAAQ,GAAGC,WAAW,CAACC,CAAC,CAAC;EAC/BnB,SAAS,CAAC,MAAM;IACZ,MAAMoB,SAAS,GAAGC,UAAU,CAAC,MAAM;MACjCX,SAAS,CAAC,IAAI,CAAC;IACjB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXY,YAAY,CAACF,SAAS,CAAC;MAEvBH,QAAQ,CAAC;QAACM,IAAI,EAAGC,cAAc,CAACC;MAAiB,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAGT;EACC,oBACEtB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,EACE,CAACjB,MAAM,gBAAGN,OAAA,CAACF,KAAK;MAAC0B,OAAO,EAAIhB,IAAK;MAACiB,KAAK,EAAE;QAAEC,KAAK,EAAE,OAAO;QAAEC,SAAS,EAAE;MAAQ,CAAE;MAAAJ,QAAA,eAChFvB,OAAA,CAACF,KAAK,CAAC8B,OAAO;QAAAL,QAAA,EACXb;MAAI;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACS;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACV,gBAAGhC,OAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAW,iBAEnB;AAEP;AAAC3B,EAAA,CA1CeF,SAAS;AAAA8B,EAAA,GAAT9B,SAAS;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}